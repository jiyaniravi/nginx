
user www-data;

# worker_processes : Number of processes at a time nginx could use [Max process = Number of CPU cores]
# worker_processes 2;
worker_processes auto;

load_module /etc/nginx/modules/ngx_http_image_filter_module.so;

events {
   # worker_connections : Number of requests, 1 process/core will handle at a time 
   worker_connections 1024;
}

http {

    include mime.types;

    #--------------------------------------------------------------------------------------------------
    # Define limit zone configurations : To stop brute force attack based on Clients IP, Request URI..
    #--------------------------------------------------------------------------------------------------
    # limit_req_zone $binary_remote_addr;
    limit_req_zone $request_uri zone=MYZONE:10m rate=1r/s;

    #--------------------------------------------------------------------------------------------------
    # Request-Response buffering size timeout configurations
    #--------------------------------------------------------------------------------------------------
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    
    client_body_timeout 1s;
    client_header_timeout 1s;

    keepalive_timeout 30s;
    send_timeout 5s;

    sendfile on;
    tcp_nopush on;

    #--------------------------------------------------------------------------------------------------
    # gzip compression configurations
    #--------------------------------------------------------------------------------------------------
    gzip on;
    gzip_comp_level 3;
    gzip_types text/css text/javascript;

    #--------------------------------------------------------------------------------------------------
    # Configure micro cache for dynamic content configurations
    #--------------------------------------------------------------------------------------------------
    # Configure microcache (fastcgi)
    fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:100m inactive=60m;
    fastcgi_cache_key "$scheme$request_method$host$request_uri"; #Will be hashed using MD5
    add_header X-Cache $upstream_cache_status;

    # TO stop sharing nginx server information with client/browser, for example nginx version
    server_tokens off;

    server{
        listen 80;
        server_name 172.17.160.201;

        root /home/rjiyani/projects/demo;

        #--------------------------------------------------------------------------------------------------
        # Various paths/location configurations
        #--------------------------------------------------------------------------------------------------
        #prefix match
        location /greet {
            return 200 'Hello from nginx any location starting with /greet';
        }

        #exact match
        location = /greet {
            return 200 'Hello from nginx exact /greet location';
        }

        #regex match, it is case sensitive - use of pcre lib
        location ~ /greet[0-9] {
            return 200 'Hello from nginx regex /greet location';
        }

        #regex match, it is case insensitive - use of pcre lib
         location ~* /greet[0-9] {
             return 200 'Hello from nginx regex /greet location : Case insensetive';
         }

        #Preferential prefix modifier
        location ^~ /Greet2 {
            return 200 'Hello from nginx Preferential prefix modifier /Greet2 location';
        }


        #--------------------------------------------------------------------------------------------------
        # Inspect variable values and query parameters in URL
        #--------------------------------------------------------------------------------------------------
        location /inspect {
            return 200 "$host\n$uri\n$args\n$arg_name";
        }


        #--------------------------------------------------------------------------------------------------
        # Check static API Key
        #--------------------------------------------------------------------------------------------------
        location /validate_login {
            if ( $arg_apikey != 12345 ){
                return 401 'Unauthorised Call!';        
            }

            return 200 'Authorised Call!';
        }

        #--------------------------------------------------------------------------------------------------
        # Create custom variable, change value, use in response 
        #--------------------------------------------------------------------------------------------------
        set $is_weekend 'No';
        if ( $date_local ~ 'Saturday|Sunday' ){
            set $is_weekend 'Yes';
        }
        location /is_weekend {
            return 200 'Is weekend : $is_weekend';
        }

        #--------------------------------------------------------------------------------------------------
        # Redirect/return URL response to another path 
        #--------------------------------------------------------------------------------------------------
        location /logo {
            return 307 /thumb.png;
        }

        #--------------------------------------------------------------------------------------------------
        # Rewrite URL path
        #--------------------------------------------------------------------------------------------------
        # rewrite ^/user/\w+ /greet;
        rewrite ^/user/(\w+) /greet/$1 last;
        rewrite ^/greet/ravi /thumb.png;
        location = /greet/ravi {
            return 200 "Hello Ravi";
        }

        #--------------------------------------------------------------------------------------------------
        # try_files check for existance of file, if it exists irrespective of URL it will be served
        #--------------------------------------------------------------------------------------------------
        #try_files /thumb.png /greet;
        try_files /cat.png /greet;

        #--------------------------------------------------------------------------------------------------
        # Create custom access log file based on URL
        #--------------------------------------------------------------------------------------------------
        location /secure {
            access_log /var/log/nginx/secure.access.log;
            access_log /var/log/nginx/access.log;   # To get access log entries in more than one file
            return 200 "This location is secure!";
        }

        #--------------------------------------------------------------------------------------------------
        # Stop access logs for specific URLs/Files
        #--------------------------------------------------------------------------------------------------
        location /font_files {
            access_log off;
            return 200 "These are the fonts!";
        }
    }

    # Redirect all HTTP traffic to HTTPS
    server {
        listen *:80;
        server_name 192.168.85.29;
        return 301 https://$server_name/$request_uri;
    }

    server{

        server_name 192.168.85.29;
        root /home/rjiyani/projects/php-demo;
        index index.php index.html;

        #listen 80;   
        listen 443 ssl http2;
        ssl_certificate /etc/nginx/ssl/self.crt;
        ssl_certificate_key /etc/nginx/ssl/self.key;

        # Disable SSL protocol and use TLS protocol
        # TLS is newer version as SSL is older version and not used any longer
        # Client-Server connections are encrypted with below protocols only
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # Optimise Cipher Suits
        # Decide which cipher suit (Encryption-Decryption Algo) should be used while using TLS protocol
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!aNULL:!MD5;

        # Enable DH(Diffie Hellman)  Params
        # Allows server to key exchange with client in complete secrecy
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        # SSL Sessions to cache the connections for certain amount of time, improving connection time
        ssl_session_cache shared:SSL:40m; # 1) inbuild : used by single worker process 2) shared : used by multiple worker process
        ssl_session_timeout 4h;
        ssl_session_tickets on;           # Assign client/browser a ticket which validates SSL session at client side   

        # Prevent embedding Cross origin frame (Embeding resource as IFrame option) Click-Jacking
        add_header X-Frame-Options "SAMEORIGIN";

        # Prevent cross site scripting (XSS) 
        add_header X-XSS-Protection "1; mode=block;"

        if ($arg_skipcache = 1){
            set $no_cache 1;
        }

        location = /index.html {
            http2_push /style.css;
            http2_push /thumb.png;
        }

        limit_req zone=MYZONE burst=5 nodelay;  # If burst and nodelay has not been passed and used below test with Seige
                                                # siege -v -r 2 -c 5 https://192.168.85.29/thumb.png 
                                                # As MYZONE configured to serve 1 request per second, while using Seige tool and 
                                                # hitting 5 concurrent requests twice (So total 10 request, nginx will serve only 1 request and 
                                                # for remaining 9 it will return 503 status code (Service Unavailable)

                                                # As burst=5 passed, nginx will serve 1 + 5 = total 6 request per second 
                                                # nodelay parameter indicated without delay of 1 sec serve the request    

        location / {
            auth_basic "Secure Area";
            auth_basic_user_file /etc/nginx/.hhtpasswd;

            try_files $uri $uri/ =404;
        }

        location ~\.php$ {
            # Pass php requests to php-fpm service (fastcgi) 
            # Make sure php${version}-fpm service is up and running in your machine
            include fastcgi.conf;
            fastcgi_pass unix:/run/php/php7.4-fpm.sock;

            # Enable Cache
            fastcgi_cache ZONE_1;
            fastcgi_cache_valid 200 60m; # This is example of an array directive, which can be used multiple times in same context
            fastcgi_cache_valid 404 10m;

            fastcgi_cache_bypass $no_cache;
            fastcgi_no_cache $no_cache;
        }

        location ~* \.(css|js|jpg|png)$ {
            # image_filter rotate 180;
            # add_header my_header "Hello Ravi!";

            access_log off;
            add_header Cache-Control public;
            add_header Pragma public;
            add_header Vary Accept-Encoding;
            expires 1M;
        }
    }
}
